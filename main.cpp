//OpenCV libs
#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/videoio.hpp"
#include <opencv2/highgui.hpp>
#include <opencv2/video.hpp>

//C++ libs
#include <iostream>
#include <time.h>
#include <chrono>

using namespace std::chrono;
using namespace std;
using namespace cv;

int main()
{
    Mat frame; //current frame
    Mat resizeF;
    Mat fgMaskKNN; //fg mask fg mask generated by KNN method

    Ptr< BackgroundSubtractor> pKNN; //KNN Background subtractor

    pKNN = createBackgroundSubtractorKNN(1,2000.0,false); //int history=500, double dist2Threshold=400.0, bool detectShadows=true

    VideoCapture stream1(0);

    Mat element = getStructuringElement(MORPH_RECT, Size(3, 3), Point(1, 1));

    int tZeroMotion = 0;
    int tupdate = 0;
    int timediff = 0;

    //unconditional loop
    while (true)
    {
        Mat cameraFrame;
        if (!(stream1.read(frame))) //get one frame form video
            break;

        resize(frame, resizeF, Size(320, 240));

        pKNN->apply(resizeF, fgMaskKNN);

        morphologyEx(fgMaskKNN, fgMaskKNN, CV_MOP_OPEN, element);

        vector<vector<Point>>contours;

        findContours(fgMaskKNN, contours, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_NONE);

        double Area = 0.0;

        for(unsigned int i = 0;  i < contours.size();  i++)
        {
            Area += contourArea(contours[i]);
        }

        std::cout << " Area: " << Area << std::endl;

        if(Area != 0.0)
        {
            tZeroMotion = time(NULL);
        }

        tupdate = time(NULL);

        cout << "Time: " <<  tupdate - tZeroMotion << "s" << endl;

        timediff = tupdate - tZeroMotion;

        if(timediff >= 10)
        {
            cout << "ShutDown" << endl;
            system("poweroff");
        }

	//DEBUG
        imshow("Origin", resizeF);
        imshow("KNN", fgMaskKNN);

        if (waitKey(30) >= 0)
            break;
    }
}
